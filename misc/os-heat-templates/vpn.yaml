heat_template_version: 2013-05-23

description: >
  HOT template to create a Sandvine stack with VPN support.

  PPTP clients - [sgw] - [pts] - [igw] - Internet
                         [spb]
                         [sde]

parameters:
  ssh_key:
    type: string
    label: "Your SSH keypair name (pre-create please!)"
    description: |
        If you have not created your key, please go to
        Project/Compute/Access & Security, and either import
        one or create one. If you create it, make sure you keep
        the downloaded file (as you don't get a second chance)
    default: default

  public_net:
    type: string
    label: "Public network"
    default: "ext-net"

  public_net_id:
    type: string
    label: "Public network ID"
    default: "63e0f41b-564f-47ad-87fb-00a91611d8eb"

  vpn_user:
    type: string
    label: "Subscriber VPN user"
    default: "cloud"

  vpn_password:
    type: string
    label: "Subscriber VPN password"
    default: "cloud"

  vpn_subnet:
    type: string
    label: "VPN subnet"
    default: "192.168.0.0/24"

  vpn_gateway:
    type: string
    label: "VPN gateway"
    default: "192.168.0.1"

  vpn_ip_range:
    type: string
    label: "VPN IP range"
    default: "192.168.0.10-100"

  vpn_dns_primary:
    type: string
    label: "VPN primary DNS"
    default: "8.8.8.8"

  vpn_dns_secondary:
    type: string
    label: "VPN secondary DNS (optional)"
    default: "4.2.2.2"

  pts_image:
    type: string
    label: "PTS Image"
    default: "PTS_7.40.00"

  pts_flavor:
    type: string
    label: "PTS Flavor"
    default: "m1.large"

  spb_image:
    type: string
    label: "SPB Image"
    default: "SPB_7.00.00"

  spb_flavor:
    type: string
    label: "SPB Flavor"
    default: "m1.medium"

  sde_image:
    type: string
    label: "SDE Cloud Services Image"
    default: "SDE_7.45.03"

  sde_flavor:
    type: string
    label: "SDE Flavor"
    default: "m1.medium"

  ubuntu_image:
    type: string
    label: "Ubuntu Image"
    default: 7876f09d-d3d7-4de1-a0b6-e4d7f3f52681

  ubuntu_flavor:
    type: string
    label: "Ubuntu Flavor"
    default: "m1.little"

resources:
  router:
    type: OS::Neutron::Router
    properties:
      admin_state_up: True
      name: { str_replace: { params: { $stack_name: { get_param: "OS::stack_name" } }, template: "$stack_name-router" } }
      external_gateway_info:
        network: { get_param: public_net }

  control_net:
    type: OS::Neutron::Net
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: "OS::stack_name" } }, template: "$stack_name-control" } }

  control_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: "OS::stack_name" } }, template: "$stack_name-control-subnet" } }
      network_id: { get_resource: control_net }
      enable_dhcp: True
      cidr: 10.1.0.0/24
      allocation_pools:
        - start: 10.1.0.10
          end: 10.1.0.100

  service_net:
    type: OS::Neutron::Net
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: "OS::stack_name" } }, template: "$stack_name-service" } }

  service_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: "OS::stack_name" } }, template: "$stack_name-service-subnet" } }
      network_id: { get_resource: service_net }
      enable_dhcp: False
      cidr: 10.2.0.0/24

  data_subscriber:
    type: OS::Neutron::Net
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: "OS::stack_name" } }, template: "$stack_name-data-subscriber" } }

  data_subscriber_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: "OS::stack_name" } }, template: "$stack_name-data-subscriber-subnet" } }
      network_id: { get_resource: data_subscriber }
      enable_dhcp: False
      cidr: 10.80.0.0/24

  data_internet:
    type: OS::Neutron::Net
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: "OS::stack_name" } }, template: "$stack_name-data-internet" } }

  data_internet_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: "OS::stack_name" } }, template: "$stack_name-data-internet-subnet" } }
      network_id: { get_resource: data_internet }
      enable_dhcp: False
      cidr: 10.90.0.0/24

  router_control:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: control_subnet }

  pts:
    type: OS::Nova::Server
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: "OS::stack_name" } }, template: "$stack_name-pts" } }
      key_name: { get_param: "ssh_key" }
      image: { get_param: "pts_image" }
      flavor: { get_param: "pts_flavor" }
      networks:
        - network: { get_resource: control_net }
        - network: { get_resource: service_net }
        - network: { get_resource: data_subscriber }
        - network: { get_resource: data_internet }

  spb:
    type: OS::Nova::Server
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: "OS::stack_name" } }, template: "$stack_name-spb" } }
      key_name: { get_param: "ssh_key" }
      image: { get_param: "spb_image" }
      flavor: { get_param: "spb_flavor" }
      networks:
        - network: { get_resource: control_net }
        - network: { get_resource: service_net }

  sde:
    type: OS::Nova::Server
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: "OS::stack_name" } }, template: "$stack_name-sde" } }
      key_name: { get_param: "ssh_key" }
      image: { get_param: "sde_image" }
      flavor: { get_param: "sde_flavor" }
      networks:
        - network: { get_resource: control_net }
        - network: { get_resource: service_net }

  sgw_control_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: control_net }
      fixed_ips:
        - subnet_id: { get_resource: control_subnet }

  sgw_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: sgw_control_port }

  sgw:
    type: OS::Nova::Server
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: "OS::stack_name" } }, template: "$stack_name-sgw" } }
      key_name: { get_param: "ssh_key" }
      image: { get_param: "ubuntu_image" }
      flavor: { get_param: "ubuntu_flavor" }
      networks:
        - port: { get_resource: sgw_control_port }
        - network: { get_resource: data_subscriber }
      config_drive: "true"
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo ubuntu:ubuntu | chpasswd
            echo net.ipv4.ip_forward = 1 >> /etc/sysctl.conf
            sysctl -p
            apt-get update
            apt-get install -y pptpd nginx libnss-myhostname
            cat << EOF > /etc/network/interfaces.d/eth1.cfg
            # Link to igw via PTS data ports.
            auto eth1
            iface eth1 inet static
              address 10.3.0.2
              netmask 255.255.255.252
            EOF
            ifup eth1
            echo -ne "$vpn_user\tpptpd\t$vpn_password\t*" >> /etc/ppp/chap-secrets
            echo -ne "localip $vpn_gateway\nremoteip $vpn_ip_range\n" >> /etc/pptpd.conf
            echo -ne "ms-dns $vpn_dns_primary\n" >> /etc/ppp/pptpd-options
            if [ "x$vpn_dns_secondary" != "x" ]; then
              echo -ne "ms-dns $vpn_dns_secondary\n" >> /etc/ppp/pptpd-options
            fi
            service pptpd restart
            cat << EOF > /etc/ppp/ip-up.d/001-vpn-up
            #!/bin/bash
            #PPP_IFACE=\$1
            n=\$(echo \$PPP_IFACE | sed s/ppp//g)
            TABLE=\$[1000+\$n]
            /sbin/ip rule add dev \$PPP_IFACE table \$TABLE
            /sbin/ip route add default via 10.3.0.1 table \$TABLE
            EOF
            chmod 0755 /etc/ppp/ip-up.d/001-vpn-up
            cat << EOF > /etc/ppp/ip-down.d/001-vpn-down
            #!/bin/bash
            #PPP_IFACE=\$1
            n=\$(echo \$PPP_IFACE | sed s/ppp//g)
            TABLE=\$[1000+\$n]
            /sbin/ip rule del dev \$PPP_IFACE
            /sbin/ip route flush table \$TABLE
            EOF
            chmod 0755 /etc/ppp/ip-down.d/001-vpn-down
            service nginx stop
            rm -f /etc/nginx/sites-enabled/default
            cat << EOF > /etc/nginx/sites-available/cloud-services
            server {
              listen 80;
              server_name localhost;
              access_log /dev/null;
              location / {
                proxy_pass http://$sde_ip:80;
                proxy_redirect   off;
                proxy_buffering  off;
                proxy_set_header Host   \$host;
                proxy_set_header X-Real-IP  \$remote_addr;
              }
            }
            EOF
            ln -s /etc/nginx/sites-available/cloud-services /etc/nginx/sites-enabled
            service nginx start
          params:
            $sde_ip: { get_attr: [ sde, networks, { get_attr: [ control_net, name ] }, 0 ] }
            $vpn_user: { get_param: vpn_user }
            $vpn_password: { get_param: vpn_password }
            $vpn_gateway: { get_param: vpn_gateway }
            $vpn_ip_range: { get_param: vpn_ip_range }
            $vpn_dns_primary: { get_param: vpn_dns_primary }
            $vpn_dns_secondary: { get_param: vpn_dns_secondary }

  igw:
    type: OS::Nova::Server
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: "OS::stack_name" } }, template: "$stack_name-igw" } }
      key_name: { get_param: "ssh_key" }
      image: { get_param: "ubuntu_image" }
      flavor: { get_param: "ubuntu_flavor" }
      networks:
        - network: { get_resource: control_net }
        - network: { get_resource: data_internet }
      config_drive: "true"
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo ubuntu:ubuntu | chpasswd
            echo net.ipv4.ip_forward = 1 >> /etc/sysctl.conf
            sysctl -p
            apt-get update
            apt-get install -y libnss-myhostname
            cat << EOF > /etc/network/interfaces.d/eth1.cfg
            # Link to sgw via PTS data ports.
            auto eth1
            iface eth1 inet static
              address 10.3.0.1
              netmask 255.255.255.252
              up ip route add $vpn_subnet via 10.3.0.2
              down ip route del $vpn_subnet via 10.3.0.2
              up iptables -t nat -A POSTROUTING -s $vpn_subnet -j MASQUERADE
              down iptables -t nat -D POSTROUTING -s $vpn_subnet -j MASQUERADE
            EOF
            ifup eth1
          params:
            $vpn_subnet: { get_param: vpn_subnet }

outputs:
  vpn_server:
    description: "IP address of the VPN server"
    value: { get_attr: [ sgw_floating_ip, floating_ip_address ] }
