#! /bin/bash

# Copyright 2016, Sandvine Incorporated.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


export LC_ALL=C


RELEASE="{{sandvine_release}}"


SVPTS="{{svpts_image_name}}"
SVSDE="{{svsde_image_name}}"
SVSPB="{{svspb_image_name}}"


BOXES="$SVPTS $SVSDE $SVSPB"


PTS_CTRL_IP=192.168.192.30
PTS_SRVC_IP=192.168.192.150

SDE_CTRL_IP=192.168.192.20
SDE_SRVC_IP=192.168.192.140

SPB_CTRL_IP=192.168.192.10
SPB_SRVC_IP=192.168.192.130


for i in "$@"
do
case $i in

	--kvm-install-server)

		KVM_INSTALL="server"
		shift
		;;

	--kvm-install-desktop)

		KVM_INSTALL="desktop"
		shift
		;;

	--libvirt-define)

		LIBVIRT_DEFINE="yes"
		shift
		;;

	--libvirt-undefine)

		LIBVIRT_UNDEFINE="YES"
		shift
		;;

	--download-images)

		DOWNLOAD_IMAGES="yes"
		shift
		;;

	--libvirt-install-images)

		LIBVIRT_INSTALL_IMAGES="yes"
		shift
		;;

	--sudo-without-pass)

		SUDO_SETUP="yes"
		shift
		;;

	--openstack-install)

		OS_INSTALL="yes"
		shift
		;;

        --openstack-project=*)

                OS_PROJECT="${i#*=}"
		OS_IMAGE_UPLOAD="yes"
                shift
                ;;

	--is-hostname-ok)

		IS_HOSTNAME_OK="yes"
		shift
		;;

esac
done


if [ "$IS_HOSTNAME_OK" == "yes" ]
then

	HOST_NAME=$(hostname)
	FQDN=$(hostname -f)
	DOMAIN=$(hostname -d)


	echo
	echo "The detected local configuration are:"
	echo
	echo "Hostname:" $HOST_NAME
	echo "FQDN:" $FQDN
	echo "Domain:" $DOMAIN


	# If the hostname and hosts file aren't configured according, abort.
	if [ -z $HOST_NAME ]; then
	        echo "Hostname not found... Configure the file /etc/hostname with your hostname. ABORTING!"
	        exit 1
	fi

	if [ -z $DOMAIN ]; then
	        echo "Domain not found... Configure the file /etc/hosts with your \"IP + FQDN + HOSTNAME\". ABORTING!"
	        exit 1
	fi

	if [ -z $FQDN ]; then
	        echo "FQDN not found... Configure your /etc/hosts according. ABORTING!"
	        exit 1
	fi

	echo
	echo "The /etc/hostname and /etc/hosts files meet configuration requirements."

	exit 0

fi


if [ "$LIBVIRT_UNDEFINE" == "YES" ]
then

	clear

	echo
	echo "WARNING!!!"
	echo
	echo "You are about to UNDEFINE your Network and Virtual Machine definitons!"
	echo
	echo "However, your QCoW2s will be left intact."
	echo
	echo "About to shutdown your Virtual Machines."
	echo
	echo "You have 10 seconds to hit CONTROL +C to cancel this operation."

	sleep 10

	virsh net-destroy subscriber
	virsh net-destroy service
	virsh net-destroy internet
	virsh net-destroy control

	virsh net-undefine internet
	virsh net-undefine subscriber
	virsh net-undefine control
	virsh net-undefine service


	virsh shutdown $SVPTS
	virsh shutdown $SVSDE
	virsh shutdown $SVSPB

	virsh undefine $SVPTS
	virsh undefine $SVSDE
	virsh undefine $SVSPB

	exit 0

fi


if [ "$DOWNLOAD_IMAGES" == "yes" ]
then

        echo
        echo "Enter your Sandvine's FTP (ftp.support.sandvine.com) account details:"
        echo

        echo -n "Username: "
        read FTP_USER

        echo -n "Password: "
        read -s FTP_PASS

	echo
	wget -c --user=$FTP_USER --password=$FTP_PASS ftp://{{packages_server}}/{{packages_path}}/$SVPTS-disk1.qcow2c
	wget -c --user=$FTP_USER --password=$FTP_PASS ftp://{{packages_server}}/{{packages_path}}/$SVSPB-disk1.qcow2c
	wget -c --user=$FTP_USER --password=$FTP_PASS ftp://{{packages_server}}/{{packages_path}}/$SVSDE-disk1.qcow2c

	exit 0

fi


if [ "$LIBVIRT_INSTALL_IMAGES" == "yes" ]
then

	if [ -f /var/lib/libvirt/images/$SVPTS-disk1.qcow2 ] || [ -f /var/lib/libvirt/images/$SVSDE-disk1.qcow2  ] || [ -f /var/lib/libvirt/images/$SVSPB-disk1.qcow2 ]
	then

		echo
	        echo "ERROR: There already seem to be PTS, SDE, or SPB disk images in </var/lib/libvirt/images>, aborting...."

	        exit 1

	fi

	echo
	echo "Deploying QCoW2 images into /var/lib/libvirt/images subdirectory..."

	echo "$SVPTS"
	sudo qemu-img convert -p -f qcow2 -O qcow2 -o preallocation=metadata $SVPTS-disk1.qcow2c /var/lib/libvirt/images/$SVPTS-disk1.qcow2

	echo "$SVSDE"
	sudo qemu-img convert -p -f qcow2 -O qcow2 -o preallocation=metadata $SVSDE-disk1.qcow2c /var/lib/libvirt/images/$SVSDE-disk1.qcow2

	echo "$SVSPB"
	sudo qemu-img convert -p -f qcow2 -O qcow2 -o preallocation=metadata $SVSPB-disk1.qcow2c /var/lib/libvirt/images/$SVSPB-disk1.qcow2

	echo "Done."

	exit 0

fi


if [ "$OS_IMAGE_UPLOAD" == "yes" ]
then

	if [ ! -f ~/$OS_PROJECT-openrc.sh ]
	then
	        echo
	        echo "OpenStack Credentials for "$OS_PROJECT" account not found, aborting!"
	        exit 1
	else
	        echo
	        echo "Loading OpenStack credentials for "$OS_PROJECT" account..."
	        source ~/$OS_PROJECT-openrc.sh
	fi


	if [ "$OS_PROJECT" == "admin" ]
	then

		echo
		echo "Uploading Cloud Services $RELEASE QCoWs into Glance as public images..."

		echo "$SVSDE"
		glance image-create --file $SVSDE-disk1.qcow2c --is-public true --disk-format qcow2 --container-format bare --name "$SVSDE"

		echo "$SVSPB"
		glance image-create --file $SVSPB-disk1.qcow2c --is-public true --disk-format qcow2 --container-format bare --name "$SVSPB"

		echo "$SVPTS"
		glance image-create --file $SVPTS-disk1.qcow2c --is-public true --disk-format qcow2 --container-format bare --name "$SVPTS"

		echo
		echo "You can launch a Cloud Services Stack now! For example, by running:"
		echo
		echo "source ~/demo-openrc.sh # Assuming that you have an OpenStack Project called \"demo\"..."
		echo "heat stack-create cs-stack-1 -f ~/cs/cloudservices-stack-$RELEASE-1.yaml"

	else

		echo
		echo "Uploading Cloud Services $RELEASE QCoWs into Glance of \"$OS_PROJECT\" account."

		echo "$SVSDE"
		glance image-create --file $SVSDE-disk1.qcow2c --disk-format qcow2 --container-format bare --name "$SVSDE"

		echo "$SVSPB"
		glance image-create --file $SVSPB-disk1.qcow2c --disk-format qcow2 --container-format bare --name "$SVSPB"

		echo "$SVPTS"
		glance image-create --file $SVPTS-disk1.qcow2c --disk-format qcow2 --container-format bare --name "$SVPTS"

		echo
		echo "You can launch a Cloud Services Stack now! For example, by running:"
		echo
		echo "source ~/"$OS_PROJECT"-openrc.sh"
		echo "heat stack-create cs-stack-1 -f ~/cs/cloudservices-stack-$RELEASE-1.yaml"

	fi

	exit 0

fi


if [ "$SUDO_SETUP" == "yes" ]
then

	echo
	echo "Configuring sudores, so, members of group \"sudo\" will not require to type passwords."
	echo "You'll need to type your password now (you need to be member of group sudo already):"

	sudo sed -i -e 's/%sudo.*/%sudo ALL=NOPASSWD:ALL/g' /etc/sudoers

	exit 0

fi


if [ "$OS_INSTALL" == "yes" ]
then

	echo
        echo "Installing OpenStack Mitaka (all-in-one) on Ubuntu Xenial with SVAuto:"

	bash <(curl -s https://raw.githubusercontent.com/sandvine-eng/svauto/dev/scripts/os-install-lbr.sh)

	exit 0

fi


case $KVM_INSTALL in

	server)

		echo
		echo "Installing KVM Hypervisor Server (single-host) on Ubuntu Xenial with SVAuto:"

		bash <(curl -s https://raw.githubusercontent.com/sandvine-eng/svauto/dev/scripts/install-xenial-kvm-server.sh)

		exit 0

		;;

	desktop)

		echo
		echo "Installing KVM Hypervisor Desktop (single-host) on Ubuntu Xenial with SVAuto:"

		bash <(curl -s https://raw.githubusercontent.com/sandvine-eng/svauto/dev/scripts/install-xenial-kvm-desktop.sh)

		exit 0

		;;

esac


if [ "$LIBVIRT_DEFINE" == "yes" ]
then

	echo
	echo "Defining Virtual Machines..."
	virsh define $SVPTS.xml
	virsh autostart $SVPTS

	virsh define $SVSDE.xml
	virsh autostart $SVSDE

	virsh define $SVSPB.xml
	virsh autostart $SVSPB


	echo
	echo "Finding Virtual Machine's MAC addresses..."
	SVPTS_MACS=$(virsh dumpxml $SVPTS | grep mac\ address | head -n 2 | awk -F\' '{print $2}' | xargs)
	SVSDE_MACS=$(virsh dumpxml $SVSDE | grep mac\ address | awk -F\' '{print $2}' | xargs)
	SVSPB_MACS=$(virsh dumpxml $SVSPB | grep mac\ address | awk -F\' '{print $2}' | xargs)


	VNIC=0

	for X in $SVPTS_MACS; do
		case $VNIC in
		        0)
				if grep "$X" libvirt-control-network.xml 2>&1 > /dev/null ; then
					echo "SVPTS CTRL Already configured, aborting..." 
				else
					sed -i -e '/ip=.*'"$PTS_CTRL_IP"'/d' libvirt-control-network.xml
					sed -i -e '/range\ start/a\ \ \ \ \ \ <host mac='\'$X\'' name='\'$SVPTS\'' ip='\'$PTS_CTRL_IP\''/>' libvirt-control-network.xml
				fi
		                ;;
		        1)
			        if grep "$X" libvirt-service-network.xml 2>&1 > /dev/null ; then
			                echo "SVPTS SRVC Already configured, aborting..."
			        else
					sed -i -e '/ip=.*'"$PTS_SRVC_IP"'/d' libvirt-service-network.xml
					sed -i -e '/range\ start/a\ \ \ \ \ \ <host mac='\'$X\'' name='\'$SVPTS\'' ip='\'$PTS_SRVC_IP\''/>' libvirt-service-network.xml
				fi
		                ;;
		esac
		let VNIC\+=1
	done


	VNIC=0

	for X in $SVSDE_MACS; do
		case $VNIC in
		        0)
				if grep "$X" libvirt-control-network.xml 2>&1 > /dev/null ; then
					echo "SVSDE CTRL Already configured, aborting..." 
				else
					sed -i -e '/ip=.*'"$SDE_CTRL_IP"'/d' libvirt-control-network.xml
					sed -i -e '/range\ start/a\ \ \ \ \ \ <host mac='\'$X\'' name='\'$SVSDE\'' ip='\'$SDE_CTRL_IP\''/>' libvirt-control-network.xml
				fi
		                ;;
		        1)
			        if grep "$X" libvirt-service-network.xml 2>&1 > /dev/null ; then
			                echo "SVSDE SRVC Already configured, aborting..."
			        else
					sed -i -e '/ip=.*'"$SDE_SRVC_IP"'/d' libvirt-service-network.xml
					sed -i -e '/range\ start/a\ \ \ \ \ \ <host mac='\'$X\'' name='\'$SVSDE\'' ip='\'$SDE_SRVC_IP\''/>' libvirt-service-network.xml
				fi
		                ;;
		esac
		let VNIC\+=1
	done


	VNIC=0

	for X in $SVSPB_MACS; do
		case $VNIC in
		        0)
	       			if grep "$X" libvirt-control-network.xml 2>&1 > /dev/null ; then
					echo "SVSPB CTRL Already configured, aborting..."
				else
					sed -i -e '/ip=.*'"$SPB_CTRL_IP"'/d' libvirt-control-network.xml
					sed -i -e '/range\ start/a\ \ \ \ \ \ <host mac='\'$X\'' name='\'$SVSPB\'' ip='\'$SPB_CTRL_IP\''/>' libvirt-control-network.xml
	       			fi
		                ;;
		        1)
			        if grep "$X" libvirt-service-network.xml 2>&1 > /dev/null ; then
			                echo "SVSPB SRVC Already configured, aborting..."
				else
					sed -i -e '/ip=.*'"$SPB_SRVC_IP"'/d' libvirt-service-network.xml
					sed -i -e '/range\ start/a\ \ \ \ \ \ <host mac='\'$X\'' name='\'$SVSPB\'' ip='\'$SPB_SRVC_IP\''/>' libvirt-service-network.xml
			        fi
		                ;;
		esac
		let VNIC\+=1
	done

	echo
	echo "Defining Networks..."
	virsh net-define libvirt-control-network.xml
	virsh net-autostart control
	virsh net-start control

	virsh net-define libvirt-service-network.xml
	virsh net-autostart service
	virsh net-start service

	virsh net-define libvirt-subscriber-network.xml
	virsh net-autostart subscriber
	virsh net-start subscriber

	virsh net-define libvirt-internet-network-nat.xml
	virsh net-autostart internet
	virsh net-start internet

	exit 0

fi

