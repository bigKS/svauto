# Copyright 2016 Sandvine Incorporated ULC.  All rights reserved.
# Use of this source code is governed by a license that can be
# found in the LICENSE file.
#
# This file provides the cloud service mobile management functionality.

# Note that this MUST match the PTS file policy.pts.cs.service_rg.conf
package usage_server \
   server_type "DiameterRf" \
{% for mywheel in mdmQM %}
   service "{{loop.index}}" name "{{mywheel.name}}" \
{% endfor %}


# The table SubscriberToGroup will return the group associated with the
# sub.  Unfortunately, we cannot call Usage.Property.GrouPlan directly
# as it returns no result.  As such, we will have to stored it in a table.
# This allows to return the group name even in usage scope
table "SubscriberToGroup" \
   ( \
     string "SubscriberName", \
     string "GroupName" \
   ) \
   timeout none \
   reset_timeout none \
   persist true \
   replicate true \
   unique by (Table.SubscriberToGroup.SubscriberName)


# function to return the shared quota name
function "GetGroupPlan"(string "entityName") returns string "result"
{
  Table.SubscriberToGroup:cursor "toGroup" = Table.SubscriberToGroup[entityName]
  if true then set result = toGroup.GroupName

}

# The quota manager package.
# Update the quota as you see fit (before deployment).  Once it is 
# deployed, you will need to move subscriber out of the plan and back to 
# the plan - otherwise, it will not pick up the new quota for the rest of 
# the month.
# Note that the shared plan is used for calculation of summary of users quota only.  It is not enforced for now.
package quota_manager \
{% for mywheel in mdmQM %}
   enforcement_attribute "{{mywheel.name}}Usage integer" \
   enforcement_attribute "{{mywheel.name}}Redirected boolean" \
{% endfor %}
   enforcement_attribute "Plan string" \
{% for mywheel in mdmQM %}
   quota_name "{{mywheel.name}}" \
     period "monthly" \
     rollover "{{mywheel.rollover}}" \
     report_thresholds "{{ mywheel.reportThreshold}}" \
     count_expression "Usage.{{mywheel.name}}.Volume.TotalBytes" \
  {% for plan in mywheel.plan %}
     plan "{{plan.name}}" quota "{{plan.limit}}" event_thresholds \
         "{% for threshold in plan.event_thresholds %}
{{threshold}}%{% if loop.last %}"{% else %},{% endif %}
{% endfor %}
     \
  {% endfor %}
{% endfor %}
{% for mywheel in mdmQM %}
   quota_name "Shared{{mywheel.name}}" \
     period "monthly" \
     rollover "{{mywheel.rollover}}" \
     report_thresholds "100%" \
     count_expression "Usage.{{mywheel.name}}.Volume.TotalBytes" \
     subscriber_name_expression "GetGroupPlan(entityName: Usage.Subscriber.Name)" \
     plan "SharedQuota" quota "{{mywheel.sharedQuota}}" event_thresholds "100%"\
{% endfor %}


# Define the default group - change this to the group that you want
define "DefaultGroup" = "{{ default_group }}"


# Define the subscriber attribute - this is used to indicate what threshold
# level is reached
{% for mywheel in mdmQM %}
attribute "{{mywheel.name}}Usage" type integer
{% endfor %}

# Define whether we have already redirected the user
{% for mywheel in mdmQM %}
attribute "{{mywheel.name}}Redirected" type boolean
{% endfor %}

# Define what plan the subscriber is using
attribute "Plan" type string
attribute "GroupPlan" type string

# Auto provision subscriber with default plan
PolicyGroup all expr(Session.IsNew) {
   string "DefaultPlan" = LookupGroupPlan(groupName: DefaultGroup)
{% for mywheel in mdmQM %}
if expr(!QuotaManager_{{mywheel.name}}_IsProvisioned(SubscriberName: Session.Subscriber.Name)) then \
   set Session.Subscriber.Attribute.{{mywheel.name}}Usage = 0 and \
   QuotaManager_{{mywheel.name}}_Provision(SubscriberName: Session.Subscriber.Name, \
         Plan: DefaultPlan, \
         DataSource: "auto-provision")
{% endfor %}

}

# Auto provision shared quota
PolicyGroup all expr(Session.IsNew or Session.Subscriber.Attribute.Plan.IsUpdated ) {
   string "groupPlanName" = Left(Session.Subscriber.Attribute.Plan, Length(Session.Subscriber.Attribute.Plan)-1)
   if true then set Subscriber.Attribute.GroupPlan = groupPlanName

{% for mywheel in mdmQM %}
   if expr(!QuotaManager_Shared{{mywheel.name}}_IsProvisioned(SubscriberName: groupPlanName)) then \
   QuotaManager_Shared{{mywheel.name}}_Provision(SubscriberName: groupPlanName, \
         Plan: "SharedQuota", \
         DataSource: "auto-provision")
{% endfor %}

   # Add the entry in the SubscriberToGroup table
   Table.SubscriberToGroup:cursor "toGroup" = Table.SubscriberToGroup.Create(Session.Subscriber.Name)
   if true then set toGroup.GroupName = groupPlanName
}

# Handle roll-over scenario
{% for mywheel in mdmQM %}
if expr(QuotaManager.{{mywheel.name}}.RolloverOccurred) then \
   QuotaManager_{{mywheel.name}}_Set_Enforcement_Attribute_{{mywheel.name}}Usage( \
       SubscriberName: QuotaManager.{{mywheel.name}}.RolloverOccurred.Subscriber.Name, \
       Value: 0) and \
   QuotaManager_{{mywheel.name}}_Set_Enforcement_Attribute_{{mywheel.name}}Redirected( \
       SubscriberName: QuotaManager.{{mywheel.name}}.RolloverOccurred.Subscriber.Name, \
       Value: false)
{% endfor %}

# No need to have enforcement attribute update on shared quota rollover as no
# action is done on it.

# Handle provisioning of subscriber
PolicyGroup all expr(QuotaManager.Provisioned.Success) \
{
  PolicyGroup {
  # Everytime we move to real quota, we need to reset the threshold to 0
  # first.  If it reaches threshold, threshold event will fire again
{% for mywheel in mdmQM %}
  PolicyGroup expr(QuotaManager.Provisioned.WheelName = "{{mywheel.name}}") \
  {
    if true then \
    QuotaManager_{{mywheel.name}}_Set_Enforcement_Attribute_Plan( \
       SubscriberName: QuotaManager.Provisioned.Subscriber.Name, \
       Value: QuotaManager.Provisioned.Plan) and \
    QuotaManager_{{mywheel.name}}_Set_Enforcement_Attribute_{{mywheel.name}}Usage( \
       SubscriberName: QuotaManager.Provisioned.Subscriber.Name, \
       Value: 0) and \
    QuotaManager_{{mywheel.name}}_Set_Enforcement_Attribute_{{mywheel.name}}Redirected( \
       SubscriberName: QuotaManager.Provisioned.Subscriber.Name, \
       Value: false)
  }
{% endfor %}

  }

   # Add the entry in the SubscriberToGroup table
   string "groupPlanName" = Left(QuotaManager.Provisioned.Plan, Length(QuotaManager.Provisioned.Plan)-1)
   Table.SubscriberToGroup:cursor "toGroup" = Table.SubscriberToGroup.Create(QuotaManager.Provisioned.Subscriber.Name)
   if true then set toGroup.GroupName = groupPlanName

}

# Note that I cannot group these into PolicyGroup becasue they are event based.
# Also, since the name has to be defined during run time, I cannot put this into
# nice functions.

{% for mywheel in mdmQM %}
# Take care of {{mywheel.name}} wheel
{% for plan in mywheel.plan %}
{% for threshold in plan.event_thresholds %}
if expr(QuotaManager.{{mywheel.name}}.{{plan.name}}.Event.Over{{threshold}}Percent) then \
   QuotaManager_{{mywheel.name}}_Set_Enforcement_Attribute_{{mywheel.name}}Usage( \
      SubscriberName: QuotaManager.{{mywheel.name}}.{{plan.name}}.Event.Over{{threshold}}Percent.Subscriber.Name, \
      value: {{threshold}}) and \
   QuotaManager_{{mywheel.name}}_Set_Enforcement_Attribute_{{mywheel.name}}Redirected( \
      SubscriberName: QuotaManager.{{mywheel.name}}.{{plan.name}}.Event.Over{{threshold}}Percent.Subscriber.Name, \
      value: false )
{% endfor %}
{% endfor %}

{% endfor %}




